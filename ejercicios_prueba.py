# -*- coding: utf-8 -*-
"""Ejercicios Prueba.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vYtSVVDXs1tEKw822CqKa6dgDE_MVYuI

Ejercicio 2
"""

def pedir_entero_positivo(mensaje):
    while True:
        try:
            numero = int(input(mensaje))
            if numero >= 3 and numero <= 6:
                return numero
            else:
                print("Error: El número debe estar entre 3 y 6 (inclusive). Intenta nuevamente.")
        except ValueError:
            print("Error: Debes ingresar un número entero. Intenta nuevamente.")

def crear_matriz(filas, columnas):
    matriz = []
    for _ in range(filas):
        fila = []
        for _ in range(columnas):
            numero = float(input("Ingresa un número (Decimal o Entero) para la matriz: "))
            fila.append(numero)
        matriz.append(fila)
    return matriz

def mostrar_matriz(matriz):
    print("Arreglo poblado:")
    for fila in matriz:
        print(fila)

def calcular_suma_filas(matriz):
    suma_filas = []
    for fila in matriz:
        suma = sum(fila)
        suma_filas.append(suma)
    return suma_filas

def calcular_promedio_columnas(matriz):
    promedios = []
    num_columnas = len(matriz[0])
    for j in range(num_columnas):
        columna = [fila[j] for fila in matriz]
        promedio = sum(columna) / len(columna)
        promedios.append(promedio)
    return promedios

# Pedir dimensiones de la matriz
filas = pedir_entero_positivo("Ingresa el número de filas (entre 3 y 6): ")
columnas = pedir_entero_positivo("Ingresa el número de columnas (entre 3 y 6): ")

# Crear la matriz
matriz = crear_matriz(filas, columnas)

# Mostrar la matriz
mostrar_matriz(matriz)

# Calcular suma por filas
suma_filas = calcular_suma_filas(matriz)
print("Suma por filas:", suma_filas)

# Calcular promedio por columnas
promedios_columnas = calcular_promedio_columnas(matriz)
print("Promedio por columnas:", promedios_columnas)

"""Ejercicio 3"""

def mostrar_menu():
    print("Menú:")
    print("1. Área de un círculo")
    print("2. Perímetro de un cuadrado")
    print("3. Salir")

def calcular_area_circulo():
    radio = float(input("Ingresa el radio del círculo: "))
    area = 3.1416 * radio ** 2
    print("El área del círculo es:", area)

def calcular_perimetro_cuadrado():
    lado = float(input("Ingresa el lado del cuadrado: "))
    perimetro = 4 * lado
    print("El perímetro del cuadrado es:", perimetro)

# Programa principal
while True:
    mostrar_menu()
    opcion = input("Selecciona una opción: ")

    if opcion == "1":
        calcular_area_circulo()
    elif opcion == "2":
        calcular_perimetro_cuadrado()
    elif opcion == "3":
        print("¡Hasta luego!")
        break
    else:
        print("Opción inválida. Intenta nuevamente.")

"""Ejercicio 4"""

def mostrar_menu():
    print("Menú:")
    print("1. Espresso ($1.500)")
    print("2. Capuchino ($1.800)")
    print("3. Latte ($1.600)")
    print("4. Moca ($1.700)")
    print("5. Calcular total y aplicar descuento")
    print("6. Salir")

def calcular_total(cafe, cantidad):
    precios = {
        1: 1500,
        2: 1800,
        3: 1600,
        4: 1700
    }
    total = precios[cafe] * cantidad
    return total

def aplicar_descuento(total):
    if total >= 3000:
        descuento = total * 0.1
        total -= descuento
    return total

def cafeteria():
    total_pagar = 0
    compras = {}

    while True:
        mostrar_menu()
        opcion = input("Selecciona una opción: ")

        try:
            opcion = int(opcion)
            if opcion == 1 or opcion == 2 or opcion == 3 or opcion == 4:
                cantidad = int(input("Ingresa la cantidad de cafés: "))
                total_pagar += calcular_total(opcion, cantidad)
                if opcion in compras:
                    compras[opcion] += cantidad
                else:
                    compras[opcion] = cantidad
            elif opcion == 5:
                total_pagar = aplicar_descuento(total_pagar)
                print("Resumen de la compra:")
                for cafe, cantidad in compras.items():
                    print(f"Café {cafe}: {cantidad}")
                print("Total a pagar con descuento:", total_pagar)
                break
            elif opcion == 6:
                print("Total a pagar:", total_pagar)
                print("¡Hasta luego!")
                break
            else:
                print("Opción inválida. Intenta nuevamente.")
        except ValueError:
            print("Error: Debes ingresar un número entero. Intenta nuevamente.")

# Ejecutar el programa
cafeteria()

"""Ejercicio 5"""

import re

def validar_numero_parte(numero_parte):
    pattern = r'^[A-Za-z0-9]{6}-[A-Za-z0-9]{5}$'
    match = re.match(pattern, numero_parte)
    if match:
        if numero_parte in numero_partes:
            print("El número de parte ya existe. Ingrese uno único.")
            return False
        else:
            return True
    else:
        return False


def grabar_producto():
    while True:
        try:
            numero_parte = input("Ingresa el número de parte: ")
            if validar_numero_parte(numero_parte):
                numero_partes.append(numero_parte)
                nombre_producto = input("Ingresa el nombre del producto: ")
                nombres_productos.append(nombre_producto)
                precio_producto = float(input("Ingresa el precio del producto: "))
                if precio_producto > 0:
                    precios_productos.append(precio_producto)
                else:
                    print("El precio debe ser mayor a cero. Producto no almacenado.")
                if len(numero_partes) >= 3:
                    break
            else:
                print("Número de parte inválido. Intenta nuevamente.")
        except ValueError:
            print("Error: Ingresa un número válido para el precio.")

def buscar_producto():
    if len(numero_partes) == 0:
        print("No se han almacenado productos.")
        return

    try:
        numero_parte_buscar = input("Ingresa el número de parte a buscar: ")
        if numero_parte_buscar in numero_partes:
            index = numero_partes.index(numero_parte_buscar)
            precio_producto = precios_productos[index]
            if precio_producto >= 500:
                print("Información del producto:")
                print("Número de parte:", numero_parte_buscar)
                print("Nombre del producto:", nombres_productos[index])
                print("Precio del producto:", precio_producto)
            else:
                print("Producto sin stock.")
        else:
            print("Producto no encontrado.")
    except ValueError:
        print("Error: Ingresa un número válido para el número de parte.")

def imprimir_reporte():
    if len(numero_partes) == 0:
        print("No se han almacenado productos.")
        return

    print("Reporte de productos:")
    for i in range(len(numero_partes)):
        print("Número de parte:", numero_partes[i])
        print("Nombre del producto:", nombres_productos[i])
        print("Valor del producto:", precios_productos[i])
        print("----------------------")

def ejecutar_programa():

    while True:
        print("Opciones:")
        print("1. Grabar")
        print("2. Buscar")
        print("3. Imprimir")
        print("4. Salir")

        opcion = input("Selecciona una opción: ")

        try:
            if opcion == "1":
                grabar_producto()
            elif opcion == "2":
                buscar_producto()
            elif opcion == "3":
                imprimir_reporte()
            elif opcion == "4":
                print("¡Hasta luego!")
                break
            else:
                print("Opción inválida. Intenta nuevamente.")
        except KeyboardInterrupt:
            print("Programa interrumpido por el usuario.")
            break

# Ejecutar el programa
numero_partes = []
nombres_productos = []
precios_productos = []
ejecutar_programa()